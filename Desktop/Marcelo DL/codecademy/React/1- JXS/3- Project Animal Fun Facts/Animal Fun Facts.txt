Skip to Content
Learn React

Avatar
Learn React: Animal Fun FactsBrief
Objective
LEARN REACT
Animal Fun Facts
In this project, we’ll build a program that allows users to click an animal on the screen in order to have a fun fact pop up.

title

Our program will display a selection of animals on the screen. We’ll be allowed to decide if we want to include a background or not. Clicking an animal will cause a fact to be randomly selected from a list of potential options. The selected fact will pop up on the screen. As we keep clicking, we’ll be able to see different facts.

Let’s get started!

If you get stuck during this project or would like to see an experienced developer work through it, click “Get Unstuck” to see a project walkthrough video.

Tasks
11/11 Complete
Mark the tasks as complete by checking them off
Add a Title
1.
On line 1 in app.js you should see an import statement. This is importing the animals object from animals.js. Feel free to take a look at it now, but we’ll be coming back to it in later tasks.

For now, let’s import the React and ReactDOM libraries starting on line 2.


Hint
In JavaScript, we refer to the libraries by the names react and react-dom.

2.
Add a title constant that will hold the value of the title. For now, set its value to an empty string.

In addition, create an animalFacts constant to hold the JSX expression that we’ll want to be compiled. Set its value to a <h1> element that contains our title.

We still shouldn’t see anything in the browser yet! We’ll have to wait until we write our ReactDOM.render() method before anything shows up.


Hint
When nesting JavaScript inside of a JSX expression, the JavaScript must be wrapped in curly braces.

3.
We could fill in the empty string assigned to title if we wanted, but we could also leave it blank and let the JSX use a default value instead.

Using the ternary operator, let the header use ‘Click an animal for a fun fact’ as the default if title is an empty string.


Hint
The following line of code will evaluate to John Doe.

name === '' ? 'John Doe' : name
4.
It’s time to write our ReactDOM.render() method.

Let’s pass in animalFacts as the JSX expression that we want to be compiled and rendered. Click on index.html to find out what we should pass to document.getElementById().

When finished, click Save. If all goes well, we should see the text ‘Click an animal for a fun fact!’ appear on the screen!


Hint
Remember, the first argument of ReactDOM.render() is the JSX expression you want to be compiled. The second is the HTML element you want to append it to.

For the argument passed to document.getElementById(), look at the <div> element between the <body></body> tags in index.html.

Add a Background
5.
Let’s add a background!

Somewhere above where animalFacts is defined, create a constant named background. Set its value to a <img /> element.

Now let’s give it some attributes!

Give it a class of ‘background’
Let’s use ‘ocean’ for alt.
Finally, use ‘/images/ocean.jpg’ as the value of src.

Hint
When adding attributes to an element, they go inside of the opening tag (and they are written in camelCase in JSX). Here’s an example:

const example = (
   <div 
      className='banner'
      tabIndex='2' >
   </div>
);
6.
Let’s reformat the JSX expression stored in animalFacts to include the background variable.

Wrap the current header element and our new background variable inside of <div></div> tags. Since the expression is going to be multiple lines, wrap it in parentheses.

Click Save. If everything is working as it should, we should see our background image showing up underneath the title!


Hint
const example = (
    <div>
        <p></p>
        {/*some JavaScript variable or expression*/}
    </div>
);
Add an Array of Images
7.
Use a for..in loop to iterate over the animals object that we’re importing line 1. For each animal, add a new <img /> to the images array.

Assuming animal is the iterator variable, each image should have the following attributes…

key: {animal}
className: 'animal'
alt: {animal}
src: {animals[animal].image}
aria-label: {animal}
role: 'button'

Hint
const todo = ['Make bed', 'Brush teeth', 'Eat breakfast'];
 
const list = [];
for (const item in todo) {
   list.push(<li>{item}</li>)
};
8.
Now that we have our array of images, let’s inject it into the JSX expression.

Underneath {background}, create a <div>. Give it a className attribute and set it equal to 'animals'. Nest the array of images inside of this element.

Finally, click Save. We should see our animals!


Hint
An array of JSX elements is nested inside of a JSX expression just like any other JavaScript: wrapped in curly braces.

Add an Event Listener
9.
Now that we have our animals displaying on the screen, we’re ready to add an event listener! But first, let’s write a function to handle this event.

Create a function displayFact() that takes one argument e, the event target. It should pick a random fun fact based on the selected animal.

Remember the alt tags of each image match the property names in the animals object.


Hint
To generate a random index to help select an element from an array, you can use with the following expression:

const optionIndex = Math.floor(Math.random() * selectedAnimal.facts.length);
10.
Create a <p> element in animalFacts and give it an id attribute equal to 'fact'.

We can use this to grab the
element…

document.getElementById('fact').innerHTML
Set its value to the randomly selected fact, and place it at the end of the event handler function.

For each animal image, add an event listener which will listen for a click. Set its value to our event handler function.

Now save the code and click on an animal. We should see a fact pop up on the screen!


Hint
In JSX elements, event listeners are specified as attributes. Event names are written in camelCase, such as onClick for an onclick event, or onMouseOver for an onmouseover event.

Extra Credit
11.
Let’s add one last feature to our awesome app!

Create a showBackground constant. You can set its value to either true or false.

If showBackground is true, background should show up. If it’s false, it should not. Use the && operator in animalFacts to implement this feature.

Toggle the value of showBackground between true and false and save the code to see if you got it working!

BONUS: In addition to the AND && operator, we can use the OR || operator. Given a list of variables or expressions, || will return the value of the first one whose boolean evaluates to true.

Considering the boolean of an empty string is false can you think of a way to use || to replace the ternary operator in the header?


Hint
In this example, only ‘Fruit’ and ‘Bread’ will show up.

const fruit = true;
const bread = true;
const eggs = false;
 
const groceryList = (
   <ul>
      {fruit && <li>Fruit</li>}
      {bread && <li>Bread</li>}
      {eggs && <li>Eggs</li>}
   </ul>
);
Code Editor
222324252627282930313233343536373839404142434445
animal for a fun fact"}</h1>
      {showBackground && background}
      <p id = 'fact'></p>
      <div
      className = 'animals'>
      {images}
      </div>
  </div>)


Web Browser
http://localhost:8000/


Animal Fun Facts
11/11 Complete
